mytuple = ("apple", "banana", "cherry") #this is tuple , using () brackets
#Tuple items are ordered, unchangeable, and allow duplicate values.
print(mytuple[0]) #prints the first item in the tuple, which is "apple"
print(len(mytuple)) # returns the length of tuple

thistuple = ("apple",) #tuple with one item, ALWAYS PUT COMMA IN THE END
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))

#Like a list, tuple can be every data type
tuple1 = ("apple", "banana", "cherry") #str
tuple2 = (1, 5, 7, 9, 3) #int
tuple3 = (True, False, False) #bool
#mixed tuple
tuple1 = ("abc", 34, True, 40, "male")

mytuple = ("apple", "banana", "cherry")
print(type(mytuple)) # tuple has a class called "tuple"

thistuple = ("apple", "banana", "cherry")
print(thistuple[-1]) #prints last item in the tuple

thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple[2:5]) #prints the third, fourth, and fifth item

thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple[:4]) # from the beginning to the fourth number, Not Included

thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple[2:]) # from the second item to the end

thistuple = ("apple", "banana", "cherry")
if "apple" in thistuple: #conditions used in tuple
  print("Yes, 'apple' is in the fruits tuple")

  x = ("apple", "banana", "cherry")
y = list(x) #convert to a list to change items, since tuple is unchangeable
y[1] = "kiwi"
x = tuple(y) #convert to a tuple again
print(x)
'''Add values to a tuple'''
thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y #add tuple to a tuple to add items
print(thistuple)
'''remove tuple'''
thistuple = ("apple", "banana", "cherry")
del thistuple #deletes whole tuple
print(thistuple) #this will raise an error because the tuple no longer exists

'''Unpacking a tuple'''

fruits = ("apple", "banana", "cherry")
(green, yellow, red) = fruits #unpacking a tuple
print(green)
print(yellow)
print(red)

fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
(green, yellow, *red) = fruits #asterisk means all left values will be in the new list, called "red"
print(green)
print(yellow)
print(red)
'''Loops with tuples are the same as in the lists'''

'''Join tuples'''
fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2  #Multiply tuples
print(mytuple)
'''Tuple methods'''
'''count()	Returns the number of times a specified value occurs in a tuple
index()	Searches the tuple for a specified value and returns the position of where it was found
'''

myset = {"apple", "banana", "cherry"} #using {brackets}
'''Set items are unordered, unchangeable, and do not allow duplicate values.'''
thisset = {"apple", "banana", "cherry"}
print(len(thisset)) #length of data set
#sets can be any data type
set1 = {"apple", "banana", "cherry"}
set2 = {1, 5, 7, 9, 3}
set3 = {True, False, False}
#mixed set
set1 = {"abc", 34, True, 40, "male"}
#type of set
myset = {"apple", "banana", "cherry"}
print(type(myset))
'''Access Set Items'''
thisset = {"apple", "banana", "cherry"}
print("banana" in thisset) #checks if banana is in data set

thisset = {"apple", "banana", "cherry"}
print("banana" not in thisset) #checks if banana is not in data set

'''Add set items'''
thisset = {"apple", "banana", "cherry"}
thisset.add("orange") #add(function) to add items in the set
print(thisset)

thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}
thisset.update(tropical) #add elements from tropical to thisset
print(thisset)

'''Remove items from a data set'''
thisset = {"apple", "banana", "cherry"}
thisset.remove("banana") #remove() function
print(thisset)

thisset = {"apple", "banana", "cherry"}
thisset.discard("banana") #discard() method
print(thisset)

thisset = {"apple", "banana", "cherry"}
x = thisset.pop() #removes a random item from the set
print(x)
print(thisset)

thisset = {"apple", "banana", "cherry"}
thisset.clear() #clears the set
print(thisset)

thisset = {"apple", "banana", "cherry"}
del thisset #deletes all set
print(thisset)

'''Loop Items'''
thisset = {"apple", "banana", "cherry"}
for x in thisset: #usinf for cycle
  print(x)

  '''Join sets'''
  set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
set3 = set1.union(set2) #Join set1 and set2 to a new set
print(set3)

set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
set3 = set1 | set2 #the same as the union
print(set3)

set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
set3 = {"John", "Elena"}
set4 = {"apple", "bananas", "cherry"}
myset = set1.union(set2, set3, set4) #Join multiple sets using union() method
print(myset)

set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set1.update(set2) #inserts items from set2 into set1
print(set1)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.intersection(set2) #new set with items from both sets
print(set3)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1 & set2 # & used to join two sets
print(set3)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.difference(set2) # will return only items from set1 that are weren't present in the set2
print(set3)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1 - set2 #the same as the difference
print(set3)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.symmetric_difference(set2) #Keep the items that are not present in both sets
print(set3)

set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.symmetric_difference_update(set2) #method to keep the items that are not present in both sets:
print(set1)

'''Set methods'''
'''add()	 	Adds an element to the set
clear()	 	Removes all the elements from the set
copy()	 	Returns a copy of the set
difference()	-	Returns a set containing the difference between two or more sets
difference_update()	-=	Removes the items in this set that are also included in another, specified set
discard()	 	Remove the specified item
intersection()	&	Returns a set, that is the intersection of two other sets
intersection_update()	&=	Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	 	Returns whether two sets have a intersection or not
issubset()	<=	Returns whether another set contains this set or not
 	<	Returns whether all items in this set is present in other, specified set(s)
issuperset()	>=	Returns whether this set contains another set or not
 	>	Returns whether all items in other, specified set(s) is present in this set
pop()	 	Removes an element from the set
remove()	 	Removes the specified element
symmetric_difference()	^	Returns a set with the symmetric differences of two sets
symmetric_difference_update()	^=	Inserts the symmetric differences from this set and another
union()	|	Return a set containing the union of sets
update()	|=	Update the set with the union of this set and others
'''

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
#Dictionaries are used to store data values in key:value pairs.

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"])
#When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year": 2020 #dublicates are not allowed
}
print(len(thisdict))
#ANy data type
thisdict = {
  "brand": "Ford",
  "electric": False,
  "year": 1964,
  "colors": ["red", "white", "blue"]
}

print(type(thisdict)) #dict type 'dict'

'''Access items'''

x = thisdict.get("model") #Get the value of the "model" key

x = thisdict.keys() #method will return a list of all the keys in the dictionary.

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()
print(x) #before the change
car["color"] = "white"
print(x) #after the change

x = thisdict.values() #Get a list of the values

x = thisdict.items() #Get a list of the key:value pairs

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")

  '''Change Values'''
  thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})

'''Addinf Values'''

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["color"] = "red"
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"color": "red"})

'''Remove Items'''

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model") #method removes the item with the specified key name
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"] # keyword removes the item with the specified key name
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear() #method empties the dictionary
print(thisdict)

'''Loop Dictionary'''

for x in thisdict:
  print(x)

for x in thisdict.values(): #method to return values of a dictionary:
     print(x)
for x in thisdict.keys(): #method to return the keys of a dictionary
   print(x)
for x, y in thisdict.items(): #Loop through both keys and values
  print(x, y)

  '''Copy a dictionary'''
  thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy() #Make a copy of a dictionary
print(mydict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = dict(thisdict) #Make a copy of a dictionary
print(mydict)


'''Nested dictionary'''

myfamily = { #dictionary that contains three dictionaries
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

print(myfamily["child2"]["name"]) #Print the name of child 2

for x, obj in myfamily.items(): #Loop through the keys and values of all nested dictionaries
  print(x)

  for y in obj:
    print(y + ':', obj[y])


    '''Dictionary methods'''

    '''clear()	Removes all the elements from the dictionary
copy()	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	Returns the value of the specified key
items()	Returns a list containing a tuple for each key value pair
keys()	Returns a list containing the dictionary's keys
pop()	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary'''